>>> print(P[(1, 2), (3,), (4, 5, 6, 7), (8, 9, 10)].sort(key=lambda x: len(x)))
P[P(3), P(1, 2), P(8, 9, 10), P(4, 5, 6, 7)]


# Set all even numbers to 0
>>> print(P[0, 1, 2, 3].map(lambda x: 0 if x % 2 == 0 else x))
P[0, 1, 0, 3]


>>> my_odd_gen = PRand(0, 10).transform(odd_test)
>>> print(my_odd_gen)
PRand(lambda None)

>>> print(my_odd_gen[:10])
P[3, 3, 3, 5, 3, 3, 5, 3, 5, 3]



# Can also use functions in place of method names
>>> print(P[0, 1, 2, 3].offlayer(lambda x: (x * 2) + 1))
P[P^(0, 1), P^(1, 3), P^(2, 5), P^(3, 7)]



Hereâ€™s how you can implement the odd_test transformation using map and a lambda function:

p1 >> pads([0, 4, 5, 3], dur=4)
p2 >> pluck(p1.pitch.map({lambda x: x % 2 == 1: 5}, default=3)





def some_func(index):
    return int(index / 4)

print(GeneratorPattern.from_func(some_func)[:10])

# We can use lambdas too
print(GeneratorPattern.from_func(lambda
