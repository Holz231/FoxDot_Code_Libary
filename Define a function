
# You can create your own function, and decorate it, to be able
# to use it in an .every on a Player object
@PlayerMethod
def test(self):
    print(self.degree)

p1 >> pluck([0,4]).every(3, "test")

# And cancel it with
p1.never("test")




def key_change():
    Scale.default = "minor"
    Root.default = 4



def update(key, bpm=None):
    Root.default = int(key)
    if bpm is not None:
        Clock.bpm = bpm
    return



>>> def odd_test(num):
...     """ Convert an even number to 3 and an odd to 5 """
...     return 5 if num % 2 == 1 else 3




def verse():
    b1 >> bass([0,3], dur=4)
    p1 >> pluck([0,4], dur=1/2)
    d1 >> play("x--x--x-")
    Clock.future(16, chorus)
def chorus():
    b1 >> bass([0,4,5,3], dur=4)
    p1 >> pluck([0,4,7,9], dur=1/4)
    d1 >> play("x-o-")
    Clock.future(16, verse)
verse()




def some_func(index):
    return int(index / 4)

print(GeneratorPattern.from_func(some_func)[:10])


